<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="img_logoEmpresa.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        Lpq7/AvD7Probvm/swAAAABJRU5ErkJggg==
</value>
  </data>
</root>